###################################################################
##
## Name     : axi_osd
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_osd

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION PAY_CORE = v_osd@2009.09
#OPTION ARCH_SUPPORT_MAP = (OTHERS=DEVELOPMENT)
OPTION ARCH_SUPPORT_MAP = (spartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex7=PRE_PRODUCTION, kintex7=PRE_PRODUCTION, zynq=PRE_PRODUCTION, virtex7l=PRE_PRODUCTION, kintex7l=PRE_PRODUCTION)
#
OPTION IP_GROUP = MICROBLAZE:PPC:USER
OPTION USAGE_LEVEL = BASE_USER
OPTION DESC = Video On-Screen Display
OPTION LONG_DESC = The Xilinx On-Screen Display LogiCORE provides a flexible video processing block for alpha blending and compositing as well as simple text and graphics generation.  Support for up to eight layers using a combination of external video inputs (from AXI4-Stream or XSVI interfaces) and internal graphics controllers (including text generators) is provided.  Supported image sizes up to 4kx4k with YUVa 4:4:4 or 4:2:2 and RGBa image formats up to 1080p 60fps. The core is programmable through a comprehensive register interface for setting and controlling screen size, background color, layer position, and more using logic or a microprocessor. A comprehensive set of interrupt status bits is provided for processor monitoring. The LogiCORE is provided with two different interfaces:  General Purpose Processor and EDK Pcore (including device driver).



## Bus Interfaces
BUS_INTERFACE BUS = S_AXI,         BUS_STD = AXI,  BUS_TYPE = SLAVE
BUS_INTERFACE BUS = XSVI_IN,       BUS_STD = XSVI, BUS_TYPE = TARGET
BUS_INTERFACE BUS = S0_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 0)&&(C_LAYER0_TYPE==2))
BUS_INTERFACE BUS = S1_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 1)&&(C_LAYER1_TYPE==2))
BUS_INTERFACE BUS = S2_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 2)&&(C_LAYER2_TYPE==2))
BUS_INTERFACE BUS = S3_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 3)&&(C_LAYER3_TYPE==2))
BUS_INTERFACE BUS = S4_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 4)&&(C_LAYER4_TYPE==2))
BUS_INTERFACE BUS = S5_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 5)&&(C_LAYER5_TYPE==2))
BUS_INTERFACE BUS = S6_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 6)&&(C_LAYER6_TYPE==2))
BUS_INTERFACE BUS = S7_AXIS,       BUS_STD = AXIS, BUS_TYPE = TARGET,    ISVALID = ((C_NUM_LAYERS > 7)&&(C_LAYER7_TYPE==2))
BUS_INTERFACE BUS = M_AXIS,        BUS_STD = AXIS, BUS_TYPE = INITIATOR, ISVALID = (C_OUTPUT_MODE==0)
BUS_INTERFACE BUS = XSVI_OUT,      BUS_STD = XSVI, BUS_TYPE = INITIATOR, ISVALID = (C_OUTPUT_MODE==1)

## Generics for VHDL or Parameters for Verilog
PARAMETER C_DATA_WIDTH          = 8,    DT = INTEGER, RANGE = (8,10,12)
PARAMETER C_NUM_LAYERS          = 2,    DT = INTEGER, RANGE = (1:8)
PARAMETER C_NUM_DATA_CHANNELS   = 2,    DT = INTEGER, RANGE = (2,3)
PARAMETER C_SCREEN_WIDTH        = 1280, DT = INTEGER, RANGE = (128:4096)
PARAMETER C_READ_FIFO_LATENCY   = 1,    DT = INTEGER, RANGE = (0:6)
PARAMETER C_ALPHA_CHANNEL_EN    = 0,    DT = INTEGER, RANGE = (0,1) #, VALUES = (0 = YUV, 0 = RGB, 1 = RGBA, 1 = YUVA)
PARAMETER C_OUTPUT_MODE         = 1,    DT = INTEGER, RANGE = (0,1), VALUES = (1 = "XSVI Interface", 0 = "AXI4-Stream Interface")

PARAMETER C_S_AXIS_TDATA_WIDTH = 16, DT = INTEGER, RANGE = (16,32,64), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_s_axis_data_width, ASSIGNMENT = UPDATE
PARAMETER C_M_AXIS_TDATA_WIDTH = 16, DT = INTEGER, RANGE = (16,32,64), IPLEVEL_UPDATE_VALUE_PROC = iplevel_update_m_axis_data_width, ASSIGNMENT = UPDATE,  ISVALID = (C_OUTPUT_MODE==0)



PARAMETER C_LAYER0_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI")
PARAMETER C_LAYER1_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 1)
PARAMETER C_LAYER2_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 2)
PARAMETER C_LAYER3_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 3)
PARAMETER C_LAYER4_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 4)
PARAMETER C_LAYER5_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 5)
PARAMETER C_LAYER6_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 6)
PARAMETER C_LAYER7_TYPE = 2,   DT = INTEGER, RANGE=(0:3), VALUES = (0 = DISABLED, 1 = "Internal Graphics Controller", 2 = "External AXI4-Stream", 3 = "External XSVI"), ISVALID = (C_NUM_LAYERS > 7)

PARAMETER C_LAYER0_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))
PARAMETER C_LAYER0_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 0) && (C_LAYER0_TYPE == 1))

PARAMETER C_LAYER1_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))
PARAMETER C_LAYER1_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 1) && (C_LAYER1_TYPE == 1))

PARAMETER C_LAYER2_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1)) 
PARAMETER C_LAYER2_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))
PARAMETER C_LAYER2_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 2) && (C_LAYER2_TYPE == 1))

PARAMETER C_LAYER3_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))
PARAMETER C_LAYER3_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 3) && (C_LAYER3_TYPE == 1))

PARAMETER C_LAYER4_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))
PARAMETER C_LAYER4_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 4) && (C_LAYER4_TYPE == 1))

PARAMETER C_LAYER5_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))
PARAMETER C_LAYER5_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 5) && (C_LAYER5_TYPE == 1))

PARAMETER C_LAYER6_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))
PARAMETER C_LAYER6_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 6) && (C_LAYER6_TYPE == 1))

PARAMETER C_LAYER7_IMEM_SIZE              = 48,  DT = INTEGER, RANGE=(2:4096)                           , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_INS_BOX_EN             = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_INS_LINE_EN            = 0,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_INS_TEXT_EN            = 1,   DT = INTEGER, RANGE=(0,1)                              , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_CLUT_SIZE              = 16,  DT = INTEGER, RANGE=(16,256)                           , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_CLUT_MEMTYPE           = 2,   DT = INTEGER, RANGE=(0:2), VALUES = (0 = Distributed, 1 = Block, 2 = Auto), ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_FONT_NUM_CHARS         = 96 , DT = INTEGER, RANGE=(1:256)                            , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_FONT_WIDTH             = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_FONT_HEIGHT            = 8,   DT = INTEGER, RANGE=(8,16)                             , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_FONT_BPP               = 1,   DT = INTEGER, RANGE=(1:2)                              , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_FONT_ASCII_OFFSET      = 32,  DT = INTEGER, RANGE=(0:255)                            , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_TEXT_NUM_STRINGS       = 8,   DT = INTEGER, RANGE=(1:32)                             , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))
PARAMETER C_LAYER7_TEXT_MAX_STRING_LENGTH = 32,  DT = INTEGER, RANGE=(2,4,8,16,32,64)                   , ISVALID = ((C_NUM_LAYERS > 7) && (C_LAYER7_TYPE == 1))

#############################################################################
# AXI 4 Parameters
#############################################################################
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, BUS = S_AXI, VALUES = (AXI4LITE=AXI4LITE, AXI4=AXI4), TYPE = NON_HDL, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ID_WIDTH = 4, DT = INTEGER, BUS = S_AXI, BUS = S_AXI, RANGE = (1:16), TYPE = NON_HDL, ASSIGNMENT = CONSTANT
#PARAMETER C_S_AXI_PROTOCOL = AXI4, DT = STRING, BUS = S_AXI, TYPE = NON_HDL, ASSIGNMENT = CONSTANT
#PARAMETER C_S_AXI_PROTOCOL = AXI4, BUS = S_AXI, VALUES = (AXI4LITE=AXI4LITE, AXI4=AXI4), TYPE = NON_HDL
#PARAMETER C_S_AXI_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, ADDR_TYPE = MEMORY, CACHEABLE = TRUE, MIN_SIZE = 0xFFF, ASSIGNMENT = REQUIRE
#PARAMETER C_S_AXI_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), PAIR = C_S_AXI_BASEADDR, ADDRESS = HIGH, BUS = S_AXI, CACHEABLE = TRUE, ASSIGNMENT = REQUIRE
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_HIGHADDR, BUS = S_AXI, MIN_SIZE = 0x00400, ASSIGNMENT = REQUIRE
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_BASEADDR, BUS = S_AXI, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI
PARAMETER C_S_AXI_CLK_FREQ_HZ = 100000000, DT = INTEGER, BUS = S_AXI, IO_IS = clk_freq, CLK_PORT = clk, CLK_UNIT = HZ
## ethernetlite has acceptance = 1
#PARAMETER C_S_AXI_WRITE_ACCEPTANCE = 2, DT = INTEGER, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = S_AXI
#PARAMETER C_S_AXI_READ_ACCEPTANCE = 2, DT = INTEGER, ASSIGNMENT = CONSTANT, TYPE = NON_HDL, BUS = S_AXI
## from ethernetlite
#PARAMETER C_S_AXI_SUPPORTS_NARROW_BURST = 0, DT = INTEGER, TYPE = NON_HDL, BUS = S_AXI, ASSIGNMENT = CONSTANT
#
PARAMETER C_M_AXIS_PROTOCOL  = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = M_AXIS, ASSIGNMENT = CONSTANT, ISVALID = (C_OUTPUT_MODE==0), TYPE = NON_HDL
PARAMETER C_S0_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S0_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 0)&&(C_LAYER0_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S1_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S1_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 1)&&(C_LAYER1_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S2_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S2_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 2)&&(C_LAYER2_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S3_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S3_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 3)&&(C_LAYER3_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S4_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S4_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 4)&&(C_LAYER4_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S5_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S5_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 5)&&(C_LAYER5_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S6_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S6_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 6)&&(C_LAYER6_TYPE==2)), TYPE = NON_HDL
PARAMETER C_S7_AXIS_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S7_AXIS, ASSIGNMENT = CONSTANT, ISVALID = ((C_NUM_LAYERS > 7)&&(C_LAYER7_TYPE==2)), TYPE = NON_HDL

#############################################################################
PARAMETER C_FAMILY = virtex7, DT = STRING

## Ports
#############################################################################
# AXI Ports
#############################################################################
#PORT S_AXI_ACLK         = "",           DIR = I, SIGIS = CLK, BUS = S_AXI, ASSIGNMENT = REQUIRE
PORT S_AXI_ARESETN      = ARESETN,      DIR = I, SIGIS = RST, BUS = S_AXI:M_AXIS:S0_AXIS:S1_AXIS:S2_AXIS:S3_AXIS:S4_AXIS:S5_AXIS:S6_AXIS:S7_AXIS
PORT S_AXI_AWADDR       = AWADDR,       DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID      = AWVALID,      DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY      = AWREADY,      DIR = O, BUS = S_AXI
PORT S_AXI_WDATA        = WDATA,        DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB        = WSTRB,        DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID       = WVALID,       DIR = I, BUS = S_AXI
PORT S_AXI_WREADY       = WREADY,       DIR = O, BUS = S_AXI
PORT S_AXI_BRESP        = BRESP,        DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID       = BVALID,       DIR = O, BUS = S_AXI
PORT S_AXI_BREADY       = BREADY,       DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR       = ARADDR,       DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID      = ARVALID,      DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY      = ARREADY,      DIR = O, BUS = S_AXI
PORT S_AXI_RDATA        = RDATA,        DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP        = RRESP,        DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID       = RVALID,       DIR = O, BUS = S_AXI
PORT S_AXI_RREADY       = RREADY,       DIR = I, BUS = S_AXI
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH

###############################################################################
# XSVI input 
###############################################################################
PORT clk               = video_clk,    DIR = I, BUS = XSVI_IN:M_AXIS:S0_AXIS:S1_AXIS:S2_AXIS:S3_AXIS:S4_AXIS:S5_AXIS:S6_AXIS:S7_AXIS:S_AXI, SIGIS = CLK, ASSIGNMENT = REQUIRE
PORT vblank_in         = vblank,       DIR = I, BUS = XSVI_IN
PORT vsync_in          = vsync,        DIR = I, BUS = XSVI_IN, ISVALID = (C_OUTPUT_MODE==1)
PORT hblank_in         = hblank,       DIR = I, BUS = XSVI_IN, ISVALID = (C_OUTPUT_MODE==1)
PORT hsync_in          = hsync,        DIR = I, BUS = XSVI_IN, ISVALID = (C_OUTPUT_MODE==1)
PORT active_video_in   = active_video, DIR = I, BUS = XSVI_IN, ISVALID = (C_OUTPUT_MODE==1)
PORT active_chroma_in  = active_chroma,DIR = I, BUS = XSVI_IN, ISVALID = (C_OUTPUT_MODE==1)
PORT video_data_in     = video_data,   DIR = I, VEC = [(C_NUM_DATA_CHANNELS+C_ALPHA_CHANNEL_EN)*C_DATA_WIDTH-1:0],            BUS = XSVI_IN, ISVALID = (C_OUTPUT_MODE==1)

###############################################################################
## AXI4-Stream Read DATA Ports 
###############################################################################

PORT s0_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S0_AXIS
PORT s0_axis_tlast          = TLAST,        DIR = I,                                  BUS = S0_AXIS
PORT s0_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S0_AXIS, ENDIAN = LITTLE
PORT s0_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S0_AXIS, ENDIAN = LITTLE
PORT s0_axis_tready         = TREADY,       DIR = O,                                  BUS = S0_AXIS

PORT s1_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S1_AXIS
PORT s1_axis_tlast          = TLAST,        DIR = I,                                  BUS = S1_AXIS
PORT s1_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S1_AXIS, ENDIAN = LITTLE
PORT s1_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S1_AXIS, ENDIAN = LITTLE
PORT s1_axis_tready         = TREADY,       DIR = O,                                  BUS = S1_AXIS

PORT s2_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S2_AXIS
PORT s2_axis_tlast          = TLAST,        DIR = I,                                  BUS = S2_AXIS
PORT s2_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S2_AXIS, ENDIAN = LITTLE
PORT s2_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S2_AXIS, ENDIAN = LITTLE
PORT s2_axis_tready         = TREADY,       DIR = O,                                  BUS = S2_AXIS

PORT s3_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S3_AXIS
PORT s3_axis_tlast          = TLAST,        DIR = I,                                  BUS = S3_AXIS
PORT s3_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S3_AXIS, ENDIAN = LITTLE
PORT s3_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S3_AXIS, ENDIAN = LITTLE
PORT s3_axis_tready         = TREADY,       DIR = O,                                  BUS = S3_AXIS

PORT s4_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S4_AXIS
PORT s4_axis_tlast          = TLAST,        DIR = I,                                  BUS = S4_AXIS
PORT s4_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S4_AXIS, ENDIAN = LITTLE
PORT s4_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S4_AXIS, ENDIAN = LITTLE
PORT s4_axis_tready         = TREADY,       DIR = O,                                  BUS = S4_AXIS

PORT s5_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S5_AXIS
PORT s5_axis_tlast          = TLAST,        DIR = I,                                  BUS = S5_AXIS
PORT s5_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S5_AXIS, ENDIAN = LITTLE
PORT s5_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S5_AXIS, ENDIAN = LITTLE
PORT s5_axis_tready         = TREADY,       DIR = O,                                  BUS = S5_AXIS

PORT s6_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S6_AXIS
PORT s6_axis_tlast          = TLAST,        DIR = I,                                  BUS = S6_AXIS
PORT s6_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S6_AXIS, ENDIAN = LITTLE
PORT s6_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S6_AXIS, ENDIAN = LITTLE
PORT s6_axis_tready         = TREADY,       DIR = O,                                  BUS = S6_AXIS

PORT s7_axis_tvalid         = TVALID,       DIR = I,                                  BUS = S7_AXIS
PORT s7_axis_tlast          = TLAST,        DIR = I,                                  BUS = S7_AXIS
PORT s7_axis_tdata          = TDATA,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH-1:0],BUS = S7_AXIS, ENDIAN = LITTLE
PORT s7_axis_tkeep          = TKEEP,        DIR = I, VEC = [C_S_AXIS_TDATA_WIDTH/8-1:0],BUS = S7_AXIS, ENDIAN = LITTLE
PORT s7_axis_tready         = TREADY,       DIR = O,                                  BUS = S7_AXIS


###############################################################################
## AXI4-Stream Write DATA Ports 
###############################################################################


PORT m_axis_tvalid          = TVALID,       DIR = O,                                  BUS = M_AXIS
PORT m_axis_tlast           = TLAST,        DIR = O,                                  BUS = M_AXIS
PORT m_axis_tdata           = TDATA,        DIR = O, VEC = [C_M_AXIS_TDATA_WIDTH-1:0],BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tkeep           = TKEEP,        DIR = O, VEC = [C_M_AXIS_TDATA_WIDTH/8-1:0],BUS = M_AXIS, ENDIAN = LITTLE
PORT m_axis_tready          = TREADY,       DIR = I,                                  BUS = M_AXIS

###############################################################################
## Realtime XSVI Output
###############################################################################
PORT video_clk_out          = video_clk,    DIR = O,                         BUS = XSVI_OUT
PORT vblank_out             = vblank,       DIR = O,                         BUS = XSVI_OUT
PORT vsync_out              = vsync,        DIR = O,                         BUS = XSVI_OUT
PORT hblank_out             = hblank,       DIR = O,                         BUS = XSVI_OUT
PORT hsync_out              = hsync,        DIR = O,                         BUS = XSVI_OUT
PORT active_video_out       = active_video, DIR = O,                         BUS = XSVI_OUT
PORT active_chroma_out      = active_chroma,DIR = O,                         BUS = XSVI_OUT
PORT video_data_out         = video_data,   DIR = O, VEC = [C_NUM_DATA_CHANNELS*C_DATA_WIDTH-1:0],BUS = XSVI_OUT

PORT ce = net_vcc,      DIR = I
END
